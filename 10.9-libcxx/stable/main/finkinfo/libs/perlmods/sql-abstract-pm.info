Info2: <<
Package: sql-abstract-pm%type_pkg[perl]
Version: 2.000001
Revision: 1
Source: mirror:cpan:authors/id/M/MS/MSTROUT/SQL-Abstract-%v.tar.gz
Source-Checksum: SHA256(35a642662c349420d44be6e0ef7d8765ea743eb12ad14399aa3a232bb94e6e9a)
BuildDepends: <<
	data-dumper-concise-pm,
	test-exception-pm,
	test-warn-pm
<<
Depends: <<
	class-accessor-grouped-pm%type_pkg[perl] (>= 0.10005),
	hash-merge-pm%type_pkg[perl],
	moo-pm%type_pkg[perl] (>= 2.000001),
	mro-compat-pm%type_pkg[perl] (>= 0.12),
	perl%type_pkg[perl]-core,
	sub-quote-pm%type_pkg[perl] (>= 2.000001),
	test-deep-pm
<<
Type: perl (5.16.2 5.18.2 5.18.4 5.28.2 5.30.2 5.30.3 5.34.1)
Distribution: <<
	(%type_pkg[perl] = 5162) 10.9,
	(%type_pkg[perl] = 5162) 10.10,
	(%type_pkg[perl] = 5162) 10.11,
	(%type_pkg[perl] = 5162) 10.12,
	(%type_pkg[perl] = 5162) 10.13
<<
UpdatePOD: true
PatchScript: <<
	tail -n 7 lib/SQL/Abstract.pm > LICENSE
<<
# TestDepends: dbix-class-pm%type_pkg[perl] ... not yet in fink
InstallScript: <<
	%{default_script}
	mv %i/share/man %i/lib/perl5/%type_raw[perl]
<<
DocFiles: Changes LICENSE README
Description: Generate SQL from Perl data structures
DescDetail: <<
  This module was inspired by the excellent DBIx::Abstract. However, in
  using that module I found that what I really wanted to do was generate
  SQL, but still retain complete control over my statement handles and use
  the DBI interface. So, I set out to create an abstract SQL generation
  module.
<<
DescPackaging: <<
	Former Maintainer: degraw <degraw@users.sourceforge.net>
<<
License: Artistic/GPL
Maintainer: Daniel Macks <dmacks@netspace.org>
Homepage: https://metacpan.org/dist/SQL-Abstract
<<
