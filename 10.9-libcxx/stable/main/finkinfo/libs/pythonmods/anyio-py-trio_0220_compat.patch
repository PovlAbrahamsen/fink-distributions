--- anyio-3.6.2/src/anyio/_backends/_trio.py.orig	2025-02-09 19:27:03.000000000 -0600
+++ anyio-3.6.2/src/anyio/_backends/_trio.py	2025-02-09 19:35:53.000000000 -0600
@@ -1,6 +1,8 @@
 import array
 import math
 import socket
+import sys
+import exceptiongroup
 from concurrent.futures import Future
 from contextvars import copy_context
 from dataclasses import dataclass
@@ -62,6 +64,18 @@
 if TYPE_CHECKING:
     from trio_typing import TaskStatus
 
+if sys.version_info >= (3, 10):
+    from typing import ParamSpec
+else:
+    from typing_extensions import ParamSpec
+
+
+if sys.version_info >= (3, 11):
+    from typing import TypeVarTuple, Unpack
+else:
+    from exceptiongroup import BaseExceptionGroup
+    from typing_extensions import TypeVarTuple, Unpack
+
 try:
     from trio import lowlevel as trio_lowlevel
 except ImportError:
@@ -161,7 +175,7 @@
 #
 
 
-class ExceptionGroup(BaseExceptionGroup, trio.MultiError):
+class ExceptionGroup(BaseExceptionGroup):
     pass
 
 
@@ -185,9 +199,14 @@
     ) -> Optional[bool]:
         try:
             return await self._nursery_manager.__aexit__(exc_type, exc_val, exc_tb)
-        except trio.MultiError as exc:
-            raise ExceptionGroup(exc.exceptions) from None
+        except BaseExceptionGroup as exc:
+            if not exc.split(trio.Cancelled)[1]:
+                raise trio.Cancelled._create() from exc
+
+
+            raise
         finally:
+            del exc_val, exc_tb
             self._active = False
 
     def start_soon(self, func: Callable, *args: object, name: object = None) -> None:
--- anyio-3.6.2/src/anyio/_core/_sockets.py.orig	2025-02-09 19:37:11.000000000 -0600
+++ anyio-3.6.2/src/anyio/_core/_sockets.py	2025-02-09 19:47:17.000000000 -0600
@@ -29,6 +29,9 @@
 else:
     from typing_extensions import Literal
 
+if sys.version_info < (3, 11):
+    from exceptiongroup import ExceptionGroup
+
 IPPROTO_IPV6 = getattr(socket, "IPPROTO_IPV6", 41)  # https://bugs.python.org/issue29515
 
 GetAddrInfoReturnType = List[
@@ -218,7 +221,11 @@
                 await event.wait()
 
     if connected_stream is None:
-        cause = oserrors[0] if len(oserrors) == 1 else asynclib.ExceptionGroup(oserrors)
+        cause = (
+            oserrors[0]
+            if len(oserrors) == 1
+            else ExceptionGroup("multiple connection attempts failed", oserrors)
+        )
         raise OSError("All connection attempts failed") from cause
 
     if tls or tls_hostname or ssl_context:
