# -*- coding: ascii; tab-width: 4 -*-
Info2: <<
Package: argcomplete-py%type_pkg[python]
Version: 3.2.2
Revision: 1
Description: Bash tab completion for argparse
License: BSD
Maintainer: None <fink-devel@lists.sourceforge.net>
Type: python (3.8 3.9 3.10)

Source: https://files.pythonhosted.org/packages/source/a/argcomplete/argcomplete-%v.tar.gz
Source-Checksum: SHA256(f3e49e8ea59b4026ee29548e24488af46e30c9de57d48638e24f54a1ea1000a2)

Depends: <<
	python%type_pkg[python],
	typing-extensions-py%type_pkg[python] (>= 3.6.4),
	zipp-py%type_pkg[python] (>= 0.5.0-1)
<<
BuildDepends: <<
	setuptools-tng-py%type_pkg[python] (>= 56),
	setuptools-scm-py%type_pkg[python]
<<

CompileScript: <<
	%p/bin/python%type_raw[python] setup.py build
<<

# tests are all wonky
#InfoTest: <<
#	TestDepends: <<
#		pexpect-py%type_pkg[python]
#	<<
#	TestScript: <<
#		#!/bin/sh -ev
#		# https://build.opensuse.org/package/view_file/openSUSE:Factory/python-argcomplete/python-argcomplete.spec?expand=1
#		export LANG=en_US.UTF-8
#		export TERM=xterm-mono
#		perl -pi -e 's|coverage |%p/bin/coverage%type_raw[python] |g' Makefile
#		sed -i -e "1s|#!.*python.*|#!%p/bin/python%type_raw[python]|" test/prog test/*.py scripts/*
#		sed -i -e "s|python3 |%p/bin/python%type_raw[python] |g" test/test.py
#		make test || exit 2
#		PYTHONPATH=%b/build/lib %p/bin/coverage%type_raw[python] run --source=argcomplete --omit=argcomplete/packages/_shlex.py ./test/test.py -v || exit 2
#	<<
#<<

InstallScript: <<
	#!/bin/sh -ev
	%p/bin/python%type_raw[python] setup.py install --root=%d
	for i in register-python-argcomplete python-argcomplete-check-easy-install-script activate-global-python-argcomplete ; do
		mv %i/bin/$i %i/bin/$i-py%type_raw[python]
	done
<<
# We don't want to unversion the binaries, so skip P*InstScript and u-a
Homepage: https://github.com/kislyuk/argcomplete
DocFiles: LICENSE.rst README.rst
DescDetail: <<
Bash/zsh tab completion for argparse
Argcomplete provides easy, extensible command line tab completion of
arguments for your Python application.

It makes two assumptions:
* You're using bash or zsh as your shell
* You're using argparse to manage your command line arguments/options

Argcomplete is particularly useful if your program has lots of options
or subparsers, and if your program can dynamically suggest completions
for your argument/option values (for example, if the user is browsing
resources over the network).
<<
# Info2
<<
