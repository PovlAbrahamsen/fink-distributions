diff -ruNp ttf2eot-0.0.3-orig/ttf2eot.cpp ttf2eot-0.0.3/ttf2eot.cpp
--- ttf2eot-0.0.3-orig/ttf2eot.cpp	2017-01-06 13:21:32
+++ ttf2eot-0.0.3/ttf2eot.cpp	2023-10-15 13:46:26
@@ -5,6 +5,7 @@
 #include <assert.h>
 #include <limits.h>
 #include <string.h>
+#include <errno.h>
 
 #include <vector>
 
@@ -56,7 +57,7 @@ int main(int argc, char **argv)
     } else {
         input = fopen(argv[1], "rb");
         if (input == NULL) {
-            fprintf(stderr, "could not open input file %s, %m\n", argv[1]);
+            fprintf(stderr, "could not open input file %s, %s\n", argv[1]);
             return 1;
         }
     }
@@ -66,13 +67,13 @@ int main(int argc, char **argv)
     } else {
     	output = fopen(argv[2], "wb");
     	if (output == NULL) {
-    		fprintf(stderr, "could not open output file %s, %m\n", argv[2]);
+    		fprintf(stderr, "could not open output file %s, %s\n", argv[2]);
     		return 1;
         }
     }
 
     if ((fontData = (unsigned char *) malloc(fontSize)) == NULL) {
-        fprintf(stderr, "Allocation failure, %m\n");
+        fprintf(stderr, "Allocation failure, %s\n");
         return 1;
     }
 
@@ -81,11 +82,11 @@ int main(int argc, char **argv)
         if (ret && fontSize <= SIZE_MAX / 2) {
             fontOff += ret;
             if ((fontData = (unsigned char *) realloc(fontData, fontSize *= 2)) == NULL) {
-                fprintf(stderr, "Allocation failure, %m\n");
+                fprintf(stderr, "Allocation failure, %s\n");
                 return 1;
             }
         } else if (ret) {
-            fprintf(stderr, "Too much data, %m\n");
+            fprintf(stderr, "Too much data, %s\n");
             return 1;
         } else {
             fontData = (unsigned char *) realloc(fontData, fontSize = fontOff);
@@ -98,7 +99,7 @@ int main(int argc, char **argv)
         fwrite(fontData, fontSize, 1, output);
         return 0;
     } else {
-        fprintf(stderr, "unknown error parsing input font, %m\n");
+        fprintf(stderr, "unknown error parsing input font, %s\n");
         return 1;
     }
 }
