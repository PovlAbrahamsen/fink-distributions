diff --git a/agent/trustlist.c b/agent/trustlist.c
index 4f4ef65d2..917e56cfe 100644
--- a/agent/trustlist.c
+++ b/agent/trustlist.c
@@ -485,8 +485,8 @@ istrusted_internal (ctrl_t ctrl, const char *fpr, int listmode, int *r_disabled,
                in a locked state.  */
             if (already_locked)
               ;
-            else if (ti->flags.relax || ti->flags.cm || ti->flags.qual
-                     || ti->flags.de_vs)
+            else if (listmode || ti->flags.relax || ti->flags.cm
+                     || ti->flags.qual || ti->flags.de_vs)
               {
                 unlock_trusttable ();
                 locked = 0;
diff --git a/dirmngr/dirmngr.c b/dirmngr/dirmngr.c
index 06ef22bf5..158883009 100644
--- a/dirmngr/dirmngr.c
+++ b/dirmngr/dirmngr.c
@@ -2515,7 +2515,10 @@ gpgconf_versions (void)
   const char *s;
   int n;
 
-  /* Unfortunately Npth has no way to get the version.  */
+#if NPTH_VERSION_NUMBER >= 0x010800
+  es_fprintf (es_stdout, "* nPth %s (%s)\n\n",
+              npth_get_version (NULL), npth_get_version ("\x01\x02"));
+#endif /*NPTH_VERSION_NUMBER*/
 
   s = get_revision_from_blurb (assuan_check_version ("\x01\x01"), &n);
   es_fprintf (es_stdout, "* Libassuan %s (%.*s)\n\n",
diff --git a/g10/decrypt-data.c b/g10/decrypt-data.c
index 4bb2b7e80..5d250bfdb 100644
--- a/g10/decrypt-data.c
+++ b/g10/decrypt-data.c
@@ -282,7 +282,7 @@ decrypt_data (ctrl_t ctrl, void *procctx, PKT_encrypted *ed, DEK *dek,
     }
 
   write_status_printf (STATUS_DECRYPTION_INFO, "%d %d %d",
-                       ed->mdc_method, dek->algo, 0);
+                       ed->mdc_method, dek->algo, ed->aead_algo);
 
   if (opt.show_session_key)
     {
diff --git a/g10/getkey.c b/g10/getkey.c
index d7e3909c0..105c95232 100644
--- a/g10/getkey.c
+++ b/g10/getkey.c
@@ -77,7 +77,8 @@ struct getkey_ctx_s
   /* Part of the search criteria: The type of the requested key.  A
      mask of PUBKEY_USAGE_SIG, PUBKEY_USAGE_ENC and PUBKEY_USAGE_CERT.
      If non-zero, then for a key to match, it must implement one of
-     the required uses.  */
+     the required uses.  FWIW: the req_usage field in PKT_public_key
+     used to be an u8 but meanwhile is an u16.  */
   int req_usage;
 
   /* The database handle.  */
@@ -978,7 +979,12 @@ key_byname (ctrl_t ctrl, GETKEY_CTX *retctx, strlist_t namelist,
 
   if (pk)
     {
+      /* It is a bit tricky to allow returning an ADSK key: lookup
+       * masks the req_usage flags using the standard usage maps and
+       * only if ctx->allow_adsk is set, sets the RENC flag again.  */
       ctx->req_usage = pk->req_usage;
+      if ((pk->req_usage & PUBKEY_USAGE_RENC))
+        ctx->allow_adsk = 1;
     }
 
   rc = lookup (ctrl, ctx, want_secret, ret_kb, &found_key);
@@ -3702,7 +3708,7 @@ finish_lookup (kbnode_t keyblock, unsigned int req_usage, int want_exact,
 
 #define USAGE_MASK  (PUBKEY_USAGE_SIG|PUBKEY_USAGE_ENC|PUBKEY_USAGE_CERT)
   req_usage &= USAGE_MASK;
-  /* In allow ADSK mode make sure both encryption bis are set.  */
+  /* In allow ADSK mode make sure both encryption bits are set.  */
   if (allow_adsk && (req_usage & PUBKEY_USAGE_XENC_MASK))
     req_usage |= PUBKEY_USAGE_XENC_MASK;
 
@@ -3807,7 +3813,8 @@ finish_lookup (kbnode_t keyblock, unsigned int req_usage, int want_exact,
 		log_debug ("\tsubkey not valid\n");
 	      continue;
 	    }
-	  if (!((pk->pubkey_usage & USAGE_MASK) & req_usage))
+	  if (!((pk->pubkey_usage & (USAGE_MASK | PUBKEY_USAGE_RENC))
+                & req_usage))
 	    {
 	      if (DBG_LOOKUP)
 		log_debug ("\tusage does not match: want=%x have=%x\n",
diff --git a/g10/keyedit.c b/g10/keyedit.c
index e31f13935..8c61e637e 100644
--- a/g10/keyedit.c
+++ b/g10/keyedit.c
@@ -4757,8 +4757,8 @@ append_adsk_to_key (ctrl_t ctrl, kbnode_t keyblock, PKT_public_key *adsk)
 
   /* Prepare and append the adsk.  */
   keyid_from_pk (main_pk, adsk->main_keyid); /* Fixup main keyid.  */
-  log_assert ((adsk->pubkey_usage & PUBKEY_USAGE_ENC));
-  adsk->pubkey_usage = PUBKEY_USAGE_RENC;    /* 'e' -> 'r'         */
+  log_assert ((adsk->pubkey_usage & PUBKEY_USAGE_XENC_MASK));
+  adsk->pubkey_usage = PUBKEY_USAGE_RENC;    /* 'e' or 'r' -> 'r'  */
   pkt = xtrycalloc (1, sizeof *pkt);
   if (!pkt)
     {
diff --git a/g10/keygen.c b/g10/keygen.c
index 79565b2ae..c9122f79e 100644
--- a/g10/keygen.c
+++ b/g10/keygen.c
@@ -4046,7 +4046,7 @@ prepare_adsk (ctrl_t ctrl, const char *name)
     }
 
   adsk_pk = xcalloc (1, sizeof *adsk_pk);
-  adsk_pk->req_usage = PUBKEY_USAGE_ENC;
+  adsk_pk->req_usage = PUBKEY_USAGE_ENC | PUBKEY_USAGE_RENC;
   err = get_pubkey_byname (ctrl, GET_PUBKEY_NO_AKL,
                            NULL, adsk_pk, name, NULL, NULL, 1);
   if (err)
diff --git a/g10/packet.h b/g10/packet.h
index 7621d85e6..4d9b68a62 100644
--- a/g10/packet.h
+++ b/g10/packet.h
@@ -400,10 +400,9 @@ typedef struct
      when serializing.  (Serialized.)  */
   byte    version;
   byte    selfsigversion; /* highest version of all of the self-sigs */
-  /* The public key algorithm.  (Serialized.)  */
-  byte    pubkey_algo;
+  byte    pubkey_algo;    /* The public key algorithm.  (PGP format)  */
   u16     pubkey_usage;   /* carries the usage info.            */
-  byte    req_usage;      /* hack to pass a request to getkey() */
+  u16     req_usage;      /* hack to pass a request to getkey() */
   u32     has_expired;    /* set to the expiration date if expired */
   /* keyid of the primary key.  Never access this value directly.
      Instead, use pk_main_keyid().  */
diff --git a/g10/pubkey-enc.c b/g10/pubkey-enc.c
index f19d5a09c..8599bcee6 100644
--- a/g10/pubkey-enc.c
+++ b/g10/pubkey-enc.c
@@ -373,8 +373,8 @@ get_it (ctrl_t ctrl,
 
     if (!pkb)
       {
-        err = -1;
-        log_error ("oops: public key not found for preference check\n");
+        err = gpg_error (GPG_ERR_UNEXPECTED);
+        log_info ("oops: public key not found for preference check\n");
       }
     else if (pkb->pkt->pkt.public_key->selfsigversion > 3
              && dek->algo != CIPHER_ALGO_3DES
diff --git a/g10/sig-check.c b/g10/sig-check.c
index 09d5a8b5f..2ee1ff5b2 100644
--- a/g10/sig-check.c
+++ b/g10/sig-check.c
@@ -943,7 +943,8 @@ check_signature_over_key_or_uid (ctrl_t ctrl, PKT_public_key *signer,
               rc = get_pubkey_for_sig (ctrl, signer, sig, NULL);
               if (rc)
                 {
-                  xfree (signer);
+                  if (signer_alloced != 1)
+                    xfree (signer);
                   signer = NULL;
                   signer_alloced = 0;
                   goto leave;
diff --git a/scd/scdaemon.c b/scd/scdaemon.c
index b62f5b619..db82acb33 100644
--- a/scd/scdaemon.c
+++ b/scd/scdaemon.c
@@ -1371,8 +1371,11 @@ handle_connections (int listen_fd)
       ret = npth_eselect (nfd+1, &read_fdset, NULL, NULL, t,
                           events, &events_set);
       saved_errno = errno;
-      if (events_set & 1)
-        continue;
+      if ((events_set & 1))
+        {
+          if (opt.debug)
+            log_debug ("the_event seen and reset by npth_eselect\n");
+        }
 #endif
 
       if (ret == -1 && saved_errno != EINTR)
diff --git a/tools/gpgconf.c b/tools/gpgconf.c
index ffc33e1a5..a147c351a 100644
--- a/tools/gpgconf.c
+++ b/tools/gpgconf.c
@@ -1369,6 +1369,84 @@ show_configs_one_file (const char *fname, int global, estream_t outfp,
 }
 
 
+/* Read registry string wrapper which also support the GnuPG Registry
+ * emulation.  */
+static char *
+my_read_reg_string (const char *name, int *r_hklm_fallback)
+{
+#ifdef HAVE_W32_SYSTEM
+  return read_w32_reg_string (name, r_hklm_fallback);
+#elif GPGRT_VERSION_NUMBER >= 0x013400 /* 1.52 */
+  static gpgrt_nvc_t registry;
+  static int no_registry;
+  const char *s;
+  gpgrt_nve_t e;
+  char *namebuffer = NULL;
+  char *p;
+
+  if (r_hklm_fallback)
+    *r_hklm_fallback = 0; /* We only support HKLM */
+
+  if (no_registry)
+    return NULL;
+
+  /* Read and parse the registry if not yet done.  */
+  if (!registry)
+    {
+      gpg_error_t err;
+      int lnr;
+      char *fname;
+      estream_t fp;
+
+      fname = make_filename (gnupg_sysconfdir (), "Registry", NULL);
+      fp = es_fopen (fname, "r");
+      if (!fp)
+        {
+          no_registry = 1;
+          return NULL;
+        }
+      if (opt.verbose)
+        log_info ("Note: Using Registry emulation file '%s'\n", fname);
+
+      err = gpgrt_nvc_parse (&registry, &lnr, fp, GPGRT_NVC_SECTION);
+      es_fclose (fp);
+      if (err)
+        {
+          log_info ("%s:%d: error parsing Registry emulation file: %s\n",
+                    fname, lnr, gpg_strerror (err));
+          no_registry = 1;
+          xfree (fname);
+          return NULL;
+        }
+      xfree (fname);
+    }
+
+  if (name)
+    {
+      namebuffer = xstrdup (name);
+      for (p=namebuffer; *p; p++)
+        if (*p == '\\')
+          *p = '/';
+      name = namebuffer;
+    }
+
+  e = gpgrt_nvc_lookup (registry, name);
+  if (!e && *name != '/')
+    {
+      /* Strip any HKLM or HKCU prefix and try again.  */
+      name = strchr (name, '/');
+      if (name)
+        e = gpgrt_nvc_lookup (registry, name);
+    }
+  xfree (namebuffer);
+  s = e? gpgrt_nve_value (e) : NULL;
+  return s? xtrystrdup (s) : NULL;
+#else /* GpgRT too old  */
+  return NULL;
+#endif
+}
+
+
 #ifdef HAVE_W32_SYSTEM
 /* Print registry entries relevant to the GnuPG system and related
  * software.  */
@@ -1444,7 +1522,7 @@ show_other_registry_entries (estream_t outfp)
           name = namebuf;
         }
 
-      value = read_w32_reg_string (name, &from_hklm);
+      value = my_read_reg_string (name, &from_hklm);
       if (!value)
         continue;
 
@@ -1470,6 +1548,7 @@ show_other_registry_entries (estream_t outfp)
 
   xfree (namebuf);
 }
+#endif /*HAVE_W32_SYSTEM*/
 
 
 /* Print registry entries take from a configuration file.  */
@@ -1511,7 +1590,7 @@ show_registry_entries_from_file (estream_t outfp)
         continue;
 
       xfree (value);
-      value = read_w32_reg_string (line, &from_hklm);
+      value = my_read_reg_string (line, &from_hklm);
       if (!value)
         continue;
 
@@ -1537,7 +1616,6 @@ show_registry_entries_from_file (estream_t outfp)
   es_fclose (fp);
   xfree (fname);
 }
-#endif /*HAVE_W32_SYSTEM*/
 
 
 /* Show all config files.  */
@@ -1637,7 +1715,6 @@ show_configs (estream_t outfp)
         es_fprintf (outfp, "#+end_example\n");
     }
 
-#ifdef HAVE_W32_SYSTEM
   es_fprintf (outfp, "** Registry entries\n");
   es_fprintf (outfp, "#+begin_example\n");
   any = 0;
@@ -1654,7 +1731,7 @@ show_configs (estream_t outfp)
                 any = 1;
                 es_fprintf (outfp, "Encountered in config files:\n");
               }
-            if ((p = read_w32_reg_string (sl->d, &from_hklm)))
+            if ((p = my_read_reg_string (sl->d, &from_hklm)))
               es_fprintf (outfp, "  %s ->%s<-%s\n", sl->d, p,
                           from_hklm? " [hklm]":"");
             else
@@ -1662,10 +1739,11 @@ show_configs (estream_t outfp)
             xfree (p);
           }
     }
+#ifdef HAVE_W32_SYSTEM
   show_other_registry_entries (outfp);
+#endif /*HAVE_W32_SYSTEM*/
   show_registry_entries_from_file (outfp);
   es_fprintf (outfp, "#+end_example\n");
-#endif /*HAVE_W32_SYSTEM*/
 
   free_strlist (list);
 
diff --git a/tools/gpgtar-extract.c b/tools/gpgtar-extract.c
index cdf726d88..0d5e12cab 100644
--- a/tools/gpgtar-extract.c
+++ b/tools/gpgtar-extract.c
@@ -68,6 +68,60 @@ check_suspicious_name (const char *name, tarinfo_t info)
 }
 
 
+/* This is our version of mkdir -p.  DIRECTORY is the full filename of
+ * the directory and PREFIXLEN is the length of an intial directory
+ * part which already exists.  If STRIP is set filename is removed.
+ * If VERBOSE is set a diagnostic is printed to show the created
+ * directory.  */
+static gpg_error_t
+try_mkdir_p (const char *directory, size_t prefixlen, int strip, int verbose)
+{
+  gpg_error_t err = 0;
+  char *fname;
+  char *p;
+
+  fname = xtrystrdup (directory);
+  if (!fname)
+    return gpg_error_from_syserror ();
+
+  if (strip) /* Strip last file name. */
+    {
+      p = strrchr (fname, '/');
+      if (p)
+        *p = 0;
+    }
+  else /* Remove a possible trailing slash.  */
+    {
+      if (fname[strlen (fname)-1] == '/')
+        fname[strlen (fname)-1] = 0;
+    }
+
+  if (prefixlen >= strlen (fname))
+    goto leave; /* Nothing to create */
+
+  for (p = fname+prefixlen; (p = strchr (p, '/')); p++)
+    {
+      *p = 0;
+      err = gnupg_mkdir (fname, "-rwx------");
+      if (gpg_err_code (err) == GPG_ERR_EEXIST)
+        err = 0;
+      *p = '/';
+      if (err)
+        goto leave;
+    }
+  err = gnupg_mkdir (fname, "-rwx------");
+  if (gpg_err_code (err) == GPG_ERR_EEXIST)
+    err = 0;
+  if (!err && verbose)
+    log_info ("created   '%s/'\n", fname);
+
+ leave:
+  xfree (fname);
+  return err;
+}
+
+
+
 static gpg_error_t
 extract_regular (estream_t stream, const char *dirname,
                  tarinfo_t info, tar_header_t hdr, strlist_t exthdr)
@@ -98,7 +152,6 @@ extract_regular (estream_t stream, const char *dirname,
     }
   fname = fname_buffer;
 
-
   if (opt.dry_run)
     outfp = es_fopen ("/dev/null", "wb");
   else
@@ -106,8 +159,18 @@ extract_regular (estream_t stream, const char *dirname,
   if (!outfp)
     {
       err = gpg_error_from_syserror ();
-      log_error ("error creating '%s': %s\n", fname, gpg_strerror (err));
-      goto leave;
+      /* On ENOENT, try afain after trying to create the directories.  */
+      if (!opt.dry_run && gpg_err_code (GPG_ERR_ENOENT)
+          && !try_mkdir_p (fname, strlen (dirname) + 1, 1, opt.verbose))
+        {
+          outfp = es_fopen (fname, "wb,sysopen");
+          err = outfp? 0 : gpg_error_from_syserror ();
+        }
+      if (err)
+        {
+          log_error ("error creating '%s': %s\n", fname, gpg_strerror (err));
+          goto leave;
+        }
     }
 
   for (n=0; n < hdr->nrecords;)
@@ -180,41 +243,20 @@ extract_directory (const char *dirname, tarinfo_t info,
   if (fname[strlen (fname)-1] == '/')
     fname[strlen (fname)-1] = 0;
 
-  if (! opt.dry_run && gnupg_mkdir (fname, "-rwx------"))
+  if (!opt.dry_run && gnupg_mkdir (fname, "-rwx------"))
     {
       err = gpg_error_from_syserror ();
+      /* Ignore existing directories while extracting.  */
       if (gpg_err_code (err) == GPG_ERR_EEXIST)
-        {
-          /* Ignore existing directories while extracting.  */
-          err = 0;
-        }
-
-      if (gpg_err_code (err) == GPG_ERR_ENOENT)
+        err = 0;
+      else if (gpg_err_code (err) == GPG_ERR_ENOENT)
         {
           /* Try to create the directory with parents but keep the
              original error code in case of a failure.  */
-          int rc = 0;
-          char *p;
-          size_t prefixlen;
-
-          /* (PREFIXLEN is the length of the new directory we use to
-           *  extract the tarball.)  */
-          prefixlen = strlen (dirname) + 1;
-
-          for (p = fname+prefixlen; (p = strchr (p, '/')); p++)
-            {
-              *p = 0;
-              rc = gnupg_mkdir (fname, "-rwx------");
-              if (rc && (gpg_err_code (gpg_error_from_syserror ())
-                         == GPG_ERR_EEXIST))
-                rc = 0;
-              *p = '/';
-              if (rc)
-                break;
-            }
-          if (!rc && !gnupg_mkdir (fname, "-rwx------"))
+          if (!try_mkdir_p (fname, strlen (dirname) + 1, 0, 0))
             err = 0;
         }
+
       if (err)
         log_error ("error creating directory '%s': %s\n",
                    fname, gpg_strerror (err));
