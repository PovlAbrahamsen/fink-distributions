From 91917337913473d043e7aa4c91164e75b73d8394 Mon Sep 17 00:00:00 2001
From: Gianfranco Costamagna <costamagnagianfranco@yahoo.it>
Date: Fri, 25 Feb 2022 16:47:22 +0100
Subject: [PATCH 01/14] Move from pcre3 to newer pcre2 (See:
 https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1000088)

---
 .travis.yml | 2 +-
 README      | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

Index: ettercap/.travis.yml
===================================================================
--- ettercap.orig/.travis.yml
+++ ettercap/.travis.yml
@@ -50,7 +50,7 @@
       - libncurses5-dev
       - libnet1-dev
       - libpcap-dev
-      - libpcre3-dev
+      - libpcre2-dev
       - libssl-dev
       - libgtk-3-dev
       - libgeoip-dev
Index: ettercap/README
===================================================================
--- ettercap.orig/README
+++ ettercap/README
@@ -84,7 +84,7 @@
 
 apt-get install debhelper bison check cmake flex groff libbsd-dev \
       libcurl4-openssl-dev libgeoip-dev libgtk-3-dev libltdl-dev libluajit-5.1-dev \
-      libncurses5-dev libnet1-dev libpcap-dev libpcre3-dev libssl-dev
+      libncurses5-dev libnet1-dev libpcap-dev libpcre2-dev libssl-dev
 
 ============================================================================
                                    LICENSE
Index: ettercap/cmake/Modules/EttercapLibCheck.cmake
===================================================================
--- ettercap.orig/cmake/Modules/EttercapLibCheck.cmake
+++ ettercap/cmake/Modules/EttercapLibCheck.cmake
@@ -264,11 +264,18 @@
     endif()
 endif()
 
-find_package(PCRE)
-if(PCRE_LIBRARY)
-    set(HAVE_PCRE 1)
-    include_directories(${PCRE_INCLUDE_DIR})
-    set(EC_LIBS ${EC_LIBS} ${PCRE_LIBRARY})
+find_package(PCRE2)
+if(PCRE2_LIBRARY)
+    set(HAVE_PCRE2 1)
+    include_directories(${PCRE2_INCLUDE_DIR})
+    set(EC_LIBS ${EC_LIBS} ${PCRE2_LIBRARY})
+else()
+    find_package(PCRE)
+    if(PCRE_LIBRARY)
+        set(HAVE_PCRE 1)
+        include_directories(${PCRE_INCLUDE_DIR})
+        set(EC_LIBS ${EC_LIBS} ${PCRE_LIBRARY})
+    endif()
 endif()
 
 if(ENABLE_TESTS)
Index: ettercap/cmake/Modules/FindPCRE2.cmake
===================================================================
--- /dev/null
+++ ettercap/cmake/Modules/FindPCRE2.cmake
@@ -0,0 +1,83 @@
+# Copyright 2013 Ettercap Development Team.
+#
+# Distributed under GPL licnse.
+#
+
+# Look for the header file
+find_path(PCRE2_INCLUDE_DIR NAMES pcre2.h)
+mark_as_advanced(PCRE2_INCLUDE_DIR)
+
+# Look for the library.
+find_library(PCRE2_LIBRARY NAMES pcre2-8)
+mark_as_advanced(PCRE2_LIBRARY)
+
+# Make sure we've got an include dir.
+if(NOT PCRE2_INCLUDE_DIR)
+  if(PCRE2_FIND_REQUIRED AND NOT PCRE2_FIND_QUIETLY)
+    message(FATAL_ERROR "Could not find PCRE2 include directory.")
+  endif()
+  return()
+endif()
+
+if(NOT PCRE2_LIBRARY)
+  if(PCRE2_FIND_REQUIRED AND NOT PCRE2_FIND_QUIETLY)
+    message(FATAL_ERROR "Could not find PCRE2 library.")
+  endif()
+  return()
+endif()
+
+function(extract_version FILENAME DEFNAME VARIABLE)
+  file(STRINGS ${FILENAME} pcre_version_str REGEX "^#define[\t ]+${DEFNAME}[\t ]+.*")
+  string(REGEX REPLACE "^#define[\t ]+${DEFNAME}[\t ]+([0-9]+).*" "\\1" temp_var "${pcre_version_str}")
+  set(${VARIABLE} ${temp_var} PARENT_SCOPE)
+endfunction()
+
+if(PCRE2_FIND_VERSION)
+  # Try to find the version number.
+  set(HEADER_FILE "${PCRE2_INCLUDE_DIR}/pcre2.h")
+  if(EXISTS ${HEADER_FILE})
+    extract_version(${HEADER_FILE} PCRE2_MAJOR PCRE2_VERSION_STRING_MAJOR)
+    extract_version(${HEADER_FILE} PCRE2_MINOR PCRE2_VERSION_STRING_MINOR)
+    set(PCRE2_VERSION_STRING "${PCRE2_VERSION_STRING_MAJOR}.${PCRE2_VERSION_STRING_MINOR}")
+  endif()
+
+  set(PCRE2_FAILED_VERSION_CHECK true)
+
+  if(PCRE2_FIND_VERSION_EXACT)
+    if(PCRE2_VERSION_STRING VERSION_EQUAL PCRE2_FIND_VERSION)
+      set(PCRE2_FAILED_VERSION_CHECK false)
+    endif()
+  else()
+    if(PCRE2_VERSION_STRING VERSION_EQUAL   PCRE2_FIND_VERSION OR
+      PCRE2_VERSION_STRING VERSION_GREATER PCRE2_FIND_VERSION)
+      set(PCRE2_FAILED_VERSION_CHECK false)
+    endif()
+  endif()
+
+  if(PCRE2_FAILED_VERSION_CHECK)
+    if(PCRE2_FIND_REQUIRED AND NOT PCRE2_FIND_QUIETLY)
+      if(PCRE2_FIND_VERSION_EXACT)
+        message(FATAL_ERROR "PCRE2 version check failed.
+Version ${PCRE2_VERSION_STRING} was found, version ${PCRE2_FIND_VERSION} is needed exactly.")
+      else()
+        message(FATAL_ERROR "PCRE2 version check failed.
+Version ${PCRE2_VERSION_STRING} was found, at least version ${PCRE2_FIND_VERSION} is required")
+      endif()
+    endif()
+
+    # If the version check fails, exit out of the module here
+    return()
+  endif()
+endif()
+
+#handle the QUIETLY and REQUIRED arguments and set PCRE2_FOUND to TRUE if
+# all listed variables are TRUE
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(PCRE2 DEFAULT_MSG PCRE2_LIBRARY PCRE2_INCLUDE_DIR)
+
+if(PCRE2_FOUND)
+  set(PCRE2_LIBRARY ${PCRE2_LIBRARY})
+  set(PCRE2_INCLUDE_DIR ${PCRE2_INCLUDE_DIR})
+  set(PCRE2_VERSION_STRING ${PCRE2_VERSION_STRING})
+endif()
+
Index: ettercap/include/config.h.cmake
===================================================================
--- ettercap.orig/include/config.h.cmake
+++ ettercap/include/config.h.cmake
@@ -28,6 +28,7 @@
 #cmakedefine HAVE_LIBGEN_H
 
 #cmakedefine HAVE_PCRE
+#cmakedefine HAVE_PCRE2
 #cmakedefine HAVE_POLL
 #cmakedefine HAVE_STRTOK_R
 #cmakedefine HAVE_STRNDUP
Index: ettercap/include/ec_filter.h
===================================================================
--- ettercap.orig/include/ec_filter.h
+++ ettercap/include/ec_filter.h
@@ -7,6 +7,10 @@
 #ifdef HAVE_PCRE
    #include <pcre.h>
 #endif
+#ifdef HAVE_PCRE2
+   #define PCRE2_CODE_UNIT_WIDTH 8
+   #include <pcre2.h>
+#endif
 
 /* 
  * this is the struct used by the filtering engine
@@ -128,6 +132,9 @@
    pcre *pregex;
    pcre_extra *preg_extra;   
 #endif
+#ifdef HAVE_PCRE2
+   pcre2_code *pregex;
+#endif
 };
 
 #define PCRE_OVEC_SIZE 100
Index: ettercap/plug-ins/sslstrip/sslstrip.c
===================================================================
--- ettercap.orig/plug-ins/sslstrip/sslstrip.c
+++ ettercap/plug-ins/sslstrip/sslstrip.c
@@ -33,8 +33,6 @@
 #include <ec_sleep.h>
 #include <ec_redirect.h>
 
-#include <pcre.h>
-
 #ifndef HAVE_STRNDUP
 #include <missing/strndup.h>
 #endif
@@ -148,7 +146,12 @@
 static int main_fd, main_fd6;
 static struct pollfd poll_fd[2];
 static u_int16 bind_port;
+#ifdef HAVE_PCRE
 static pcre *https_url_pcre;
+#endif
+#ifdef HAVE_PCRE2
+static pcre2_code *https_url_pcre;
+#endif
 static regex_t find_cookie_re;
 
 /* protos */
@@ -214,8 +217,13 @@
 
 static int sslstrip_init(void *dummy)
 {
+#ifdef HAVE_PCRE2
+    int error;
+    PCRE2_SIZE erroroffset;
+#else
    const char *error;
    int erroroffset;
+#endif
    int err;
    char errbuf[100];
 
@@ -230,10 +238,21 @@
       return PLUGIN_FINISHED;
    }
 
+#ifdef HAVE_PCRE2
+   https_url_pcre = pcre2_compile(URL_PATTERN, PCRE2_MULTILINE|PCRE2_CASELESS|PCRE2_ZERO_TERMINATED, 0, &error, &erroroffset, NULL);
+#else
    https_url_pcre = pcre_compile(URL_PATTERN, PCRE_MULTILINE|PCRE_CASELESS, &error, &erroroffset, NULL);
+#endif
 
    if (!https_url_pcre) {
+#ifdef HAVE_PCRE2
+      PCRE2_UCHAR buffer[256];
+      pcre2_get_error_message(error, buffer, sizeof(buffer));
+      USER_MSG("SSLStrip: plugin load failed: pcre_compile failed (offset: %d), %s\n", erroroffset, buffer);
+#else
       USER_MSG("SSLStrip: plugin load failed: pcre_compile failed (offset: %d), %s\n", erroroffset, error);
+#endif
+
       ec_redirect(EC_REDIR_ACTION_REMOVE, "http", EC_REDIR_PROTO_IPV4,
             NULL, 80, bind_port);
 #ifdef WITH_IPV6
@@ -248,7 +267,12 @@
    if (err) {
       regerror(err, &find_cookie_re, errbuf, sizeof(errbuf));
       USER_MSG("SSLStrip: plugin load failed: Could not compile find_cookie regex: %s (%d)\n", errbuf, err);
+#ifdef HAVE_PCRE2
+      pcre2_code_free(https_url_pcre);
+#else
       pcre_free(https_url_pcre);
+#endif
+
       ec_redirect(EC_REDIR_ACTION_REMOVE, "http" , EC_REDIR_PROTO_IPV4,
             NULL, 80, bind_port);
 #ifdef WITH_IPV6
@@ -292,7 +316,11 @@
 
    // Free regexes.
    if (https_url_pcre)
-     pcre_free(https_url_pcre);
+#ifdef HAVE_PCRE2
+      pcre2_code_free(https_url_pcre);
+#else
+      pcre_free(https_url_pcre);
+#endif
 
    regfree(&find_cookie_re);
 
@@ -1087,7 +1115,12 @@
    struct https_link *l, *link;
    size_t offset = 0;
    int rc;
+#ifdef HAVE_PCRE2
+   PCRE2_SIZE *ovector;
+   pcre2_match_data *match_data;
+#else
    int ovector[30];
+#endif
    char changed = 0;
    char *new_html, *url;
    size_t new_size = 0;
@@ -1100,7 +1133,17 @@
    SAFE_CALLOC(new_html, 1, connection->response->len);
    BUG_IF(new_html==NULL);
 
+#ifdef HAVE_PCRE2
+   match_data = pcre2_match_data_create_from_pattern(https_url_pcre, NULL);
+   while(offset < size && (rc = pcre2_match(https_url_pcre, (PCRE2_SPTR)buf_cpy, size, offset, 0, match_data, NULL)) > 0) {
+#else
    while(offset < size && (rc = pcre_exec(https_url_pcre, NULL, buf_cpy, size, offset, 0, ovector, 30)) > 0) {
+#endif
+
+#ifdef HAVE_PCRE2
+      ovector = pcre2_get_ovector_pointer(match_data);
+#endif
+
       match_start = ovector[0];
       match_end = ovector[1];
 
@@ -1161,6 +1204,9 @@
          changed=1;
    }
 
+#ifdef HAVE_PCRE2
+   pcre2_match_data_free(match_data);
+#endif
    
    if (changed) {
       //Copy rest of data (if any)
Index: ettercap/src/ec_debug.c
===================================================================
--- ettercap.orig/src/ec_debug.c
+++ ettercap/src/ec_debug.c
@@ -33,9 +33,6 @@
 
 #include <openssl/opensslv.h>
 #include <openssl/crypto.h>
-#ifdef HAVE_PCRE
-   #include <pcre.h>
-#endif
 
 #include <libnet.h>
 #include <pcap.h>
@@ -103,6 +100,12 @@
    #ifdef HAVE_PCRE
    fprintf(debug_file, "-> libpcre version %s\n", pcre_version());
    #endif
+   #ifdef HAVE_PCRE2
+   if(EC_TOSTRING(PCRE2_PRERELEASE)[1] == 0)
+       fprintf(debug_file, "-> libpcre2 version %s.%s %s\n", EC_TOSTRING(PCRE2_MAJOR), EC_TOSTRING(PCRE2_MINOR), EC_TOSTRING(PCRE2_DATE));
+   else
+       fprintf(debug_file, "-> libpcre2 version %s.%s %s %s\n", EC_TOSTRING(PCRE2_MAJOR), EC_TOSTRING(PCRE2_MINOR), EC_TOSTRING(PCRE2_PRERELEASE), EC_TOSTRING(PCRE2_DATE));
+   #endif
    #ifdef HAVE_EC_LUA
 	ec_lua_print_version(debug_file);
    #endif
Index: ettercap/src/ec_filter.c
===================================================================
--- ettercap.orig/src/ec_filter.c
+++ ettercap/src/ec_filter.c
@@ -29,12 +29,6 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 
-#include <regex.h>
-#ifdef HAVE_PCRE
-   #include <pcre.h>
-#endif
-
-
 #define JIT_FAULT(x, ...) do { USER_MSG("JIT FILTER FAULT: " x "\n", ## __VA_ARGS__); return -E_FATAL; } while(0)
 
 /* since we need a recursive mutex, we cannot initialize it here statically */
@@ -559,26 +553,39 @@
  */
 static int func_pcre(struct filter_op *fop, struct packet_object *po)
 {
-#ifndef HAVE_PCRE
+#if !defined HAVE_PCRE && !defined HAVE_PCRE2
    (void) fop;
    (void) po;
    JIT_FAULT("pcre_regex support not compiled in ettercap");
    return -E_NOTFOUND;
 #else
+#ifdef HAVE_PCRE2
+   PCRE2_SIZE *ovec;
+   pcre2_match_data *match_data;
+#else
    int ovec[PCRE_OVEC_SIZE];
+   memset(&ovec, 0, sizeof(ovec));
+#endif
    int ret;
    
    DEBUG_MSG("filter engine: func_pcre");
    
-   memset(&ovec, 0, sizeof(ovec));
-   
    switch (fop->op.func.level) {
       case 5:
          
          /* search in the real packet */
+#ifdef HAVE_PCRE2
+         match_data = pcre2_match_data_create_from_pattern(fop->op.func.ropt->pregex, NULL);
+         if ( (ret = pcre2_match(fop->op.func.ropt->pregex, (PCRE2_SPTR)po->DATA.data, po->DATA.len, 0, 0, match_data, NULL)) < 0)
+#else
          if ( (ret = pcre_exec(fop->op.func.ropt->pregex, fop->op.func.ropt->preg_extra, po->DATA.data, po->DATA.len, 0, 0, ovec, sizeof(ovec) / sizeof(*ovec))) < 0)
+#endif
             return -E_NOTFOUND;
 
+#ifdef HAVE_PCRE2
+         pcre2_match_data_free(match_data);
+#endif
+
          /* the pcre wants to modify the packet */
          if (fop->op.func.replace) {
             u_char *replaced;
@@ -607,6 +614,9 @@
             }
             /* now: i = strlen(q) */
 
+#ifdef HAVE_PCRE2
+            ovec = pcre2_get_ovector_pointer(match_data);
+#endif
             SAFE_CALLOC(replaced, markers*(ovec[1]-ovec[0]) + i + 1, sizeof(char));
           
             po->flags |= PO_MODIFIED;
@@ -665,7 +675,11 @@
              */
             int size_left = po->DATA.len - ovec[0] - slen;
             int data_left = po->DATA.len - ovec[1];
+#ifdef HAVE_PCRE2
+            DEBUG_MSG("func_pcre: match from %ld to %ld, substitution length is %d\n", ovec[0], ovec[1], slen);
+#else
             DEBUG_MSG("func_pcre: match from %d to %d, substitution length is %d\n", ovec[0], ovec[1], slen);
+#endif
             DEBUG_MSG("func_pcre: packet size changed by %d bytes\n", delta);
             if (delta != 0) {
                /* copy everything behind the matched string to the new position */
@@ -684,8 +698,17 @@
          break;
       case 6:
          /* search in the decoded one */
+#ifdef HAVE_PCRE2
+         match_data = pcre2_match_data_create_from_pattern(fop->op.func.ropt->pregex, NULL);
+         if ( pcre2_match(fop->op.func.ropt->pregex, (PCRE2_SPTR)po->DATA.disp_data, po->DATA.disp_len, 0, 0, match_data, NULL) < 0)
+#else
          if ( pcre_exec(fop->op.func.ropt->pregex, fop->op.func.ropt->preg_extra, po->DATA.disp_data, po->DATA.disp_len, 0, 0, NULL, 0) < 0)
+#endif
             return -E_NOTFOUND;
+
+#ifdef HAVE_PCRE2
+         pcre2_match_data_free(match_data);
+#endif
          break;
       default:
          JIT_FAULT("unsupported pcre_regex level [%d]", fop->op.func.level);
@@ -1279,10 +1302,13 @@
                break;
                
             case FFUNC_PCRE:
-               #ifdef HAVE_PCRE
-               pcre_free(fop[i].op.func.ropt->pregex);
-               pcre_free(fop[i].op.func.ropt->preg_extra);
-               SAFE_FREE(fop[i].op.func.ropt);
+               #ifdef HAVE_PCRE2
+                  pcre2_code_free(fop[i].op.func.ropt->pregex);
+                  SAFE_FREE(fop[i].op.func.ropt);
+               #else
+                  pcre_free(fop[i].op.func.ropt->pregex);
+                  pcre_free(fop[i].op.func.ropt->preg_extra);
+                  SAFE_FREE(fop[i].op.func.ropt);
                #endif               
                break;
          }
@@ -1366,9 +1392,12 @@
    size_t i = 0;
    struct filter_op *fop = fenv->chain;
    char errbuf[100];
-   int err;
-#ifdef HAVE_PCRE
+#ifdef HAVE_PCRE2
+   int perrbuf;
+   PCRE2_SIZE err;
+#else
    const char *perrbuf = NULL;
+   int err;
 #endif
      
    /* parse all the instruction */ 
@@ -1392,7 +1421,21 @@
                break;
                
             case FFUNC_PCRE:
-               #ifdef HAVE_PCRE
+               #ifdef HAVE_PCRE2
+
+               /* alloc the structure */
+               SAFE_CALLOC(fop[i].op.func.ropt, 1, sizeof(struct regex_opt));
+
+               /* prepare the regex (with default option) */
+               fop[i].op.func.ropt->pregex = pcre2_compile(fop[i].op.func.string, PCRE2_MULTILINE|PCRE2_CASELESS|PCRE2_ZERO_TERMINATED, 0, &perrbuf, &err, NULL );
+               if (fop[i].op.func.ropt->pregex == NULL)
+               {
+                  PCRE2_UCHAR buffer[256];
+                  pcre2_get_error_message(err, buffer, sizeof(buffer));
+                  FATAL_MSG("filter engine: %s\n", buffer);
+               }
+
+               #else
 
                /* alloc the structure */
                SAFE_CALLOC(fop[i].op.func.ropt, 1, sizeof(struct regex_opt));
Index: ettercap/utils/etterfilter/ef_encode.c
===================================================================
--- ettercap.orig/utils/etterfilter/ef_encode.c
+++ ettercap/utils/etterfilter/ef_encode.c
@@ -25,11 +25,6 @@
 
 #include <ctype.h>
 
-#include <regex.h>
-#ifdef HAVE_PCRE
-   #include <pcre.h>
-#endif
-
 /* protos */
 
 static char ** decode_args(char *args, int *nargs);
@@ -222,12 +217,20 @@
       } else
          SCRIPT_ERROR("Wrong number of arguments for function \"%s\" ", name);
    } else if (!strcmp(name, "pcre_regex")) {
-#ifndef HAVE_PCRE
+#if !defined HAVE_PCRE && !defined HAVE_PCRE2
       WARNING("The script contains pcre_regex, but you don't have support for it.");
 #else
-      pcre *pregex;
+
+#ifdef HAVE_PCRE2
+      int errbuf;
+      pcre2_code *pregex;
+      PCRE2_SIZE erroff;
+#else
       const char *errbuf = NULL;
+      pcre *pregex;
       int erroff;
+#endif
+
       
       if (nargs == 2) {
                      
@@ -243,11 +246,27 @@
             SCRIPT_ERROR("Unknown offset %s ", dec_args[0]);
 
          /* check if the pcre is valid */
+#ifdef HAVE_PCRE2
+         pregex = pcre2_compile(fop->op.func.string, PCRE2_MULTILINE|PCRE2_CASELESS|PCRE2_ZERO_TERMINATED, 0, &errbuf, &erroff, NULL );
+#else
          pregex = pcre_compile(fop->op.func.string, 0, &errbuf, &erroff, NULL );
+#endif
+
          if (pregex == NULL)
+         {
+#ifdef HAVE_PCRE2
+            PCRE2_UCHAR buffer[256];
+            pcre2_get_error_message(errbuf, buffer, sizeof(buffer));
+            SCRIPT_ERROR("%s\n", buffer);
+#else
             SCRIPT_ERROR("%s\n", errbuf);
-
+#endif
+         }
+#ifdef HAVE_PCRE2
+         pcre2_code_free(pregex);
+#else
          pcre_free(pregex);
+#endif
       } else if (nargs == 3) {
             
          fop->opcode = FOP_FUNC;
@@ -261,11 +280,27 @@
          ret = E_SUCCESS;
          
          /* check if the pcre is valid */
+#ifdef HAVE_PCRE2
+         pregex = pcre2_compile(fop->op.func.string, PCRE2_MULTILINE|PCRE2_CASELESS|PCRE2_ZERO_TERMINATED, 0, &errbuf, &erroff, NULL );
+#else
          pregex = pcre_compile(fop->op.func.string, 0, &errbuf, &erroff, NULL );
+#endif
          if (pregex == NULL)
+         {
+#ifdef HAVE_PCRE2
+            PCRE2_UCHAR buffer[256];
+            pcre2_get_error_message(errbuf, buffer, sizeof(buffer));
+            SCRIPT_ERROR("%s\n", buffer);
+#else
             SCRIPT_ERROR("%s\n", errbuf);
+#endif
+         }
 
+#ifdef HAVE_PCRE2
+         pcre2_code_free(pregex);
+#else
          pcre_free(pregex);
+#endif
       } else
          SCRIPT_ERROR("Wrong number of arguments for function \"%s\" ", name);
 #endif
Index: ettercap/CMakeLists.txt
===================================================================
--- ettercap.orig/CMakeLists.txt
+++ ettercap/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 2.8)
+cmake_minimum_required(VERSION 2.8.12)
 project(ettercap C)
 
 set(VERSION "0.8.3.1")
Index: ettercap/plug-ins/CMakeLists.txt
===================================================================
--- ettercap.orig/plug-ins/CMakeLists.txt
+++ ettercap/plug-ins/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(HAVE_PCRE)
+if(HAVE_PCRE OR HAVE_PCRE2)
   if(CURL_FOUND)
     add_library(sslstrip MODULE sslstrip/sslstrip.c)
     include_directories(${CURL_INCLUDE_DIR} ${PCRE_INCLUDE_DIR})
Index: ettercap/cmake/Modules/FindLIBCHECK.cmake
===================================================================
--- ettercap.orig/cmake/Modules/FindLIBCHECK.cmake
+++ ettercap/cmake/Modules/FindLIBCHECK.cmake
@@ -10,14 +10,14 @@
 pkg_check_modules(PC_LIBCHECK libcheck)
 if(PC_LIBCHECK_FOUND)
   set(LIBCHECK_FOUND TRUE)
-  set(LIBCHECK_LDFLAGS ${PC_LIBCHECK_LDFLGAS})
+  set(LIBCHECK_LDFLAGS ${PC_LIBCHECK_LDFLAGS})
   set(LIBCHECK_LIBRARIES ${PC_LIBCHECK_LIBRARIES})
   set(LIBCHECK_INCLUDE_DIRS ${PC_LIBCHECK_INCLUDE_DIR})
 else()
   pkg_check_modules(PC_CHECK check)
   if(PC_CHECK_FOUND)
     set(LIBCHECK_FOUND TRUE)
-    set(LIBCHECK_LDFLAGS ${PC_CHECK_LDFLGAS})
+    set(LIBCHECK_LDFLAGS ${PC_CHECK_LDFLAGS})
     set(LIBCHECK_LIBRARIES ${PC_CHECK_LIBRARIES})
     set(LIBCHECK_INCLUDE_DIRS ${PC_CHECK_INCLUDE_DIR})
   else()
