diff -Nurd lxml-4.3.5.orig/src/lxml/tests/test_elementtree.py lxml-4.3.5/src/lxml/tests/test_elementtree.py
--- lxml-4.3.5.orig/src/lxml/tests/test_elementtree.py	2019-02-28 15:00:17.000000000 -0500
+++ lxml-4.3.5/src/lxml/tests/test_elementtree.py	2024-03-16 13:34:36.000000000 -0400
@@ -10,6 +10,7 @@
 
 import unittest
 import os, re, tempfile, copy, operator, sys
+import pyexpat
 
 this_dir = os.path.dirname(__file__)
 if this_dir not in sys.path:
@@ -4025,29 +4026,44 @@
         self.assertEqual([(action, elem.tag) for action, elem in events],
                          expected)
 
-    def test_simple_xml(self):
-        for chunk_size in (None, 1, 5):
-            #with self.subTest(chunk_size=chunk_size):
-                parser = self.etree.XMLPullParser()
-                self.assert_event_tags(parser, [])
-                self._feed(parser, "<!-- comment -->\n", chunk_size)
-                self.assert_event_tags(parser, [])
-                self._feed(parser,
-                           "<root>\n  <element key='value'>text</element",
-                           chunk_size)
-                self.assert_event_tags(parser, [])
-                self._feed(parser, ">\n", chunk_size)
-                self.assert_event_tags(parser, [('end', 'element')])
-                self._feed(parser, "<element>text</element>tail\n", chunk_size)
-                self._feed(parser, "<empty-element/>\n", chunk_size)
-                self.assert_event_tags(parser, [
-                    ('end', 'element'),
-                    ('end', 'empty-element'),
-                    ])
-                self._feed(parser, "</root>\n", chunk_size)
-                self.assert_event_tags(parser, [('end', 'root')])
-                root = self._close_and_return_root(parser)
-                self.assertEqual(root.tag, 'root')
+    def test_simple_xml(self, chunk_size=None):
+        parser = self.etree.XMLPullParser()
+        self.assert_event_tags(parser, [])
+        self._feed(parser, "<!-- comment -->\n", chunk_size)
+        self.assert_event_tags(parser, [])
+        self._feed(parser,
+                   "<root>\n  <element key='value'>text</element",
+                   chunk_size)
+        self.assert_event_tags(parser, [])
+        self._feed(parser, ">\n", chunk_size)
+        self.assert_event_tags(parser, [('end', 'element')])
+        self._feed(parser, "<element>text</element>tail\n", chunk_size)
+        self._feed(parser, "<empty-element/>\n", chunk_size)
+        self.assert_event_tags(parser, [
+            ('end', 'element'),
+            ('end', 'empty-element'),
+            ])
+        self._feed(parser, "</root>\n", chunk_size)
+        self.assert_event_tags(parser, [('end', 'root')])
+        root = self._close_and_return_root(parser)
+        self.assertEqual(root.tag, 'root')
+
+    def test_simple_xml_chunk_1(self):
+        if self.etree is not etree and pyexpat.version_info >= (2, 6, 0):
+            raise unittest.SkipTest(
+                "Feeding the parser by too small chunks defers parsing"
+            )
+        self.test_simple_xml(chunk_size=1)
+
+    def test_simple_xml_chunk_5(self):
+        if self.etree is not etree and pyexpat.version_info >= (2, 6, 0):
+            raise unittest.SkipTest(
+                "Feeding the parser by too small chunks defers parsing"
+            )
+        self.test_simple_xml(chunk_size=5)
+
+    def test_simple_xml_chunk_22(self):
+        self.test_simple_xml(chunk_size=22)
 
     def test_feed_while_iterating(self):
         parser = self.etree.XMLPullParser()
