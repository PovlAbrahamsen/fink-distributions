diff -ruN asciidoc-py-8.6.10.orig/a2x.py asciidoc-py-8.6.10/a2x.py
--- asciidoc-py-8.6.10.orig/a2x.py	2018-05-26 03:08:44.000000000 +0200
+++ asciidoc-py-8.6.10/a2x.py2	2023-01-17 15:05:28.000000000 +0100
@@ -11,13 +11,13 @@
 
 import os
 import fnmatch
-import HTMLParser
+import html.parser
 import re
 import shutil
 import subprocess
 import sys
 import traceback
-import urlparse
+import urllib.parse
 import zipfile
 import xml.dom.minidom
 import mimetypes
@@ -76,7 +76,7 @@
     errmsg('WARNING: %s' % msg)
 
 def infomsg(msg):
-    print '%s: %s' % (PROG,msg)
+    print('%s: %s' % (PROG,msg))
 
 def die(msg, exit_code=1):
     errmsg('ERROR: %s' % msg)
@@ -102,22 +102,22 @@
     def __getattr__(self, key):
         try:
             return self[key]
-        except KeyError, k:
-            if self.has_key('_default'):
+        except KeyError as k:
+            if '_default' in self:
                 return self['_default']
             else:
-                raise AttributeError, k
+                raise AttributeError(k)
     def __setattr__(self, key, value):
         self[key] = value
     def __delattr__(self, key):
         try: del self[key]
-        except KeyError, k: raise AttributeError, k
+        except KeyError as k: raise AttributeError(k)
     def __repr__(self):
         return '<AttrDict ' + dict.__repr__(self) + '>'
     def __getstate__(self):
         return dict(self)
     def __setstate__(self,value):
-        for k,v in value.items(): self[k]=v
+        for k,v in list(value.items()): self[k]=v
 
 def isexecutable(file_name):
     return os.path.isfile(file_name) and os.access(file_name, os.X_OK)
@@ -220,12 +220,12 @@
     try:
         popen = subprocess.Popen(cmd, stdout=stdout, stderr=stderr,
                 shell=True, env=ENV)
-    except OSError, e:
+    except OSError as e:
         die('failed: %s: %s' % (cmd, e))
     stdoutdata, stderrdata = popen.communicate()
     if OPTIONS.verbose:
-        print stdoutdata
-        print stderrdata
+        print(stdoutdata)
+        print(stderrdata)
     if popen.returncode != 0 and raise_error:
         die('%s returned non-zero exit status %d' % (cmd, popen.returncode))
     return (stdoutdata, stderrdata, popen.returncode)
@@ -240,15 +240,15 @@
     The filter function takes a dictionary of tag attributes and returns True if
     the URI is to be included.
     '''
-    class FindResources(HTMLParser.HTMLParser):
+    class FindResources(html.parser.HTMLParser):
         # Nested parser class shares locals with enclosing function.
         def handle_startendtag(self, tag, attrs):
             self.handle_starttag(tag, attrs)
         def handle_starttag(self, tag, attrs):
             attrs = dict(attrs)
-            if tag == tagname and (filter is None or filter(attrs)):
+            if tag == tagname and (filter is None or list(filter(attrs))):
                 # Accept only local URIs.
-                uri = urlparse.urlparse(attrs[attrname])
+                uri = urllib.parse.urlparse(attrs[attrname])
                 if uri[0] in ('','file') and not uri[1] and uri[2]:
                     result.append(uri[2])
     if isinstance(files, str):
@@ -438,7 +438,7 @@
         for f in conf_files:
             if os.path.isfile(f):
                 verbose('loading configuration file: %s' % f)
-                execfile(f, globals())
+                exec(compile(open(f, "rb").read(), f, 'exec'), globals())
 
     def process_options(self):
         '''
