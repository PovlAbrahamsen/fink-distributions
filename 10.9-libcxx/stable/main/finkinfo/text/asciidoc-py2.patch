diff -ruN asciidoc-py-8.6.10.orig/asciidoc.py asciidoc-py-8.6.10/asciidoc.py
--- asciidoc-py-8.6.10.orig/asciidoc.py	2018-05-26 03:08:44.000000000 +0200
+++ asciidoc-py-8.6.10/asciidoc.py	2023-01-17 15:05:28.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python3
+#!/usr/bin/python2.7
 """
 asciidoc - converts an AsciiDoc text file to HTML or DocBook
 
@@ -1220,6 +1220,18 @@
     else:
         return tuple(result)
 
+def char_encoding():
+    encoding = document.attributes.get('encoding')
+    if encoding:
+        try:
+            codecs.lookup(encoding)
+        except LookupError,e:
+            raise EAsciiDoc,str(e)
+    return encoding
+
+def char_len(s):
+    return len(char_decode(s))
+
 east_asian_widths = {'W': 2,   # Wide
                      'F': 2,   # Full-width (wide)
                      'Na': 1,  # Narrow
@@ -1231,10 +1243,30 @@
 column widths."""
 
 def column_width(s):
-    width = 0
-    for c in s:
-        width += east_asian_widths[unicodedata.east_asian_width(c)]
-    return width
+    text = char_decode(s)
+    if isinstance(text, unicode):
+        width = 0
+        for c in text:
+            width += east_asian_widths[unicodedata.east_asian_width(c)]
+        return width
+    else:
+        return len(text)
+
+def char_decode(s):
+    if char_encoding():
+        try:
+            return s.decode(char_encoding())
+        except Exception:
+            raise EAsciiDoc, \
+                "'%s' codec can't decode \"%s\"" % (char_encoding(), s)
+    else:
+        return s
+
+def char_encode(s):
+    if char_encoding():
+        return s.encode(char_encoding())
+    else:
+        return s
 
 def date_time_str(t):
     """Convert seconds since the Epoch to formatted local date and time strings."""
@@ -3484,15 +3516,16 @@
             result = result + dovetail_tags([stag],data,[etag])
             i += cell.span
         return result
+
     def parse_csv(self,text):
         """
         Parse the table source text and return a list of rows, each row
         is a list of Cells.
         """
-        import io
+        import StringIO
         import csv
         rows = []
-        rdr = csv.reader(io.StringIO('\r\n'.join(text)),
+        rdr = csv.reader(StringIO.StringIO('\r\n'.join(text)),
                      delimiter=self.parameters.separator, skipinitialspace=True)
         try:
             for row in rdr:
@@ -3532,6 +3533,7 @@
         except Exception:
             self.error('csv parse error: %s' % row)
         return rows
+
     def parse_psv_dsv(self,text):
         """
         Parse list of PSV or DSV table source text lines and return a list of
@@ -5833,7 +5865,7 @@
 APP_DIR = None              # This file's directory.
 USER_DIR = None             # ~/.asciidoc
 # Global configuration files directory (set by Makefile build target).
-CONF_DIR = '/etc/asciidoc'
+CONF_DIR = '/opt/sw/etc/asciidoc'
 HELP_FILE = 'help.conf'     # Default (English) help file.
 
 # Globals
@@ -6053,7 +6085,7 @@
         message.stderr('ambiguous help topic: %s' % topic)
     else:
         for line in lines:
-            print(line, file=f)
+            print(line) >>f
 
 ### Used by asciidocapi.py ###
 def execute(cmd,opts,args):
diff -ruN asciidoc-py-8.6.10.orig/tests/testasciidoc.py asciidoc-py-8.6.10/tests/testasciidoc.py
--- asciidoc-py-8.6.10.orig/tests/testasciidoc.py	2018-05-26 03:08:44.000000000 +0200
+++ asciidoc-py-8.6.10/tests/testasciidoc.py	2023-01-17 15:05:28.000000000 +0100
@@ -1,5 +1,7 @@
 #!/usr/bin/env python3
 
+from __future__ import print_function
+
 USAGE = '''Usage: testasciidoc.py [OPTIONS] COMMAND
 
 Run AsciiDoc conformance tests specified in configuration FILE.
